"""enable_payment_system_and_fix_relationships

Revision ID: c4d84a94399d
Revises: 18d06b12a5d9
Create Date: 2025-06-20 22:14:28.691876

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'c4d84a94399d'
down_revision: Union[str, None] = '18d06b12a5d9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create enum types first
    orderstatus_enum = sa.Enum('PENDING', 'CONFIRMED', 'PAID', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED', 'REFUNDED', name='orderstatus')
    orderstatus_enum.create(op.get_bind())
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('payment_method',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('CREDIT_CARD', 'PAYPAL', 'BANK_TRANSFER', 'COD', 'MOMO', 'ZALO_PAY', name='paymentmethodtype'), nullable=False),
    sa.Column('card_number', sa.String(), nullable=True),
    sa.Column('card_holder_name', sa.String(), nullable=True),
    sa.Column('expiry_month', sa.Integer(), nullable=True),
    sa.Column('expiry_year', sa.Integer(), nullable=True),
    sa.Column('paypal_email', sa.String(), nullable=True),
    sa.Column('bank_name', sa.String(), nullable=True),
    sa.Column('account_number', sa.String(), nullable=True),
    sa.Column('account_holder', sa.String(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('payment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('payment_method_id', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('currency', sa.String(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', name='paymentstatus'), nullable=False),
    sa.Column('transaction_id', sa.String(), nullable=True),
    sa.Column('gateway_response', sa.String(), nullable=True),
    sa.Column('failure_reason', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ),
    sa.ForeignKeyConstraint(['payment_method_id'], ['payment_method.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('refundrequest',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('payment_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('reason', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('admin_note', sa.String(), nullable=True),
    sa.Column('processed_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['payment_id'], ['payment.id'], ),
    sa.ForeignKeyConstraint(['processed_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('order', sa.Column('status', sa.Enum('PENDING', 'CONFIRMED', 'PAID', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED', 'REFUNDED', name='orderstatus'), nullable=True))
    
    # Update existing orders to have default status
    op.execute("UPDATE \"order\" SET status = 'PENDING' WHERE status IS NULL")
    
    # Make status non-nullable after updating existing data
    op.alter_column('order', 'status', nullable=False)
    op.add_column('order', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('order', sa.Column('confirmed_at', sa.DateTime(), nullable=True))
    op.add_column('order', sa.Column('shipped_at', sa.DateTime(), nullable=True))
    op.add_column('order', sa.Column('delivered_at', sa.DateTime(), nullable=True))
    op.add_column('order', sa.Column('shipping_fee', sa.Float(), nullable=True))
    op.add_column('order', sa.Column('discount_amount', sa.Float(), nullable=True))
    op.add_column('order', sa.Column('final_amount', sa.Float(), nullable=True))
    
    # Update existing orders with default values
    op.execute("UPDATE \"order\" SET updated_at = CURRENT_TIMESTAMP WHERE updated_at IS NULL")
    op.execute("UPDATE \"order\" SET shipping_fee = 0.0 WHERE shipping_fee IS NULL")
    op.execute("UPDATE \"order\" SET discount_amount = 0.0 WHERE discount_amount IS NULL")
    op.execute("UPDATE \"order\" SET final_amount = total_price WHERE final_amount IS NULL")
    
    # Make fields non-nullable after updating
    op.alter_column('order', 'updated_at', nullable=False)
    op.alter_column('order', 'shipping_fee', nullable=False)
    op.alter_column('order', 'discount_amount', nullable=False)
    op.alter_column('order', 'final_amount', nullable=False)
    op.add_column('order', sa.Column('shipping_address', sa.String(), nullable=True))
    op.add_column('order', sa.Column('shipping_phone', sa.String(), nullable=True))
    op.add_column('order', sa.Column('recipient_name', sa.String(), nullable=True))
    op.add_column('order', sa.Column('shipping_notes', sa.String(), nullable=True))
    op.add_column('order', sa.Column('tracking_number', sa.String(), nullable=True))
    op.add_column('order', sa.Column('admin_notes', sa.String(), nullable=True))
    op.add_column('order', sa.Column('cancellation_reason', sa.String(), nullable=True))
    op.add_column('product', sa.Column('is_approved', sa.Boolean(), nullable=True))
    op.add_column('product', sa.Column('approval_note', sa.String(), nullable=True))
    op.add_column('product', sa.Column('approver_id', sa.Integer(), nullable=True))
    op.drop_constraint(op.f('product_approved_by_fkey'), 'product', type_='foreignkey')
    op.create_foreign_key(None, 'product', 'user', ['approver_id'], ['id'])
    op.drop_column('product', 'approved_by')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('product', sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'product', type_='foreignkey')
    op.create_foreign_key(op.f('product_approved_by_fkey'), 'product', 'user', ['approved_by'], ['id'])
    op.drop_column('product', 'approver_id')
    op.drop_column('product', 'approval_note')
    op.drop_column('product', 'is_approved')
    op.drop_column('order', 'cancellation_reason')
    op.drop_column('order', 'admin_notes')
    op.drop_column('order', 'tracking_number')
    op.drop_column('order', 'shipping_notes')
    op.drop_column('order', 'recipient_name')
    op.drop_column('order', 'shipping_phone')
    op.drop_column('order', 'shipping_address')
    op.drop_column('order', 'final_amount')
    op.drop_column('order', 'discount_amount')
    op.drop_column('order', 'shipping_fee')
    op.drop_column('order', 'delivered_at')
    op.drop_column('order', 'shipped_at')
    op.drop_column('order', 'confirmed_at')
    op.drop_column('order', 'updated_at')
    op.drop_column('order', 'status')
    op.drop_table('refundrequest')
    op.drop_table('payment')
    op.drop_table('payment_method')
    # ### end Alembic commands ###
